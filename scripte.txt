const fs = require('fs');
const { exec } = require('child_process');
const path = require('path');

const databaseFile = 'src/assets/random.json';
const targetPath = 'src/app/modules/admin/pages';
const navigationFile = 'src/app/mock-api/common/navigation/data.ts';
const serviceFileName = 'json-database.service.ts';
const appRoutesFile = 'src/app/app.routes.ts';

const database = JSON.parse(fs.readFileSync(databaseFile, 'utf8'));

const generateComponent = (table) => {
  return new Promise((resolve, reject) => {
    const componentPath = path.join(targetPath, table);

    if (fs.existsSync(componentPath)) {
      console.log(`comp for table ${table} already exist.`);
      resolve();
    } else {
      exec(`ng generate component modules/admin/pages/${table}`, (err, stdout, stderr) => {
        if (err) {
          reject(`erro gen comp: ${stderr}`);
        } else {
          console.log(`comp for table ${table} created succ.`);
          updateComponentFiles(table);
          addToNavigation(table);
          generateRoutesFile(table);
          resolve(stdout);
        }
      });
    }
  });
};

const updateComponentFiles = (table) => {
  const tsContent = `
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatTableModule } from '@angular/material/table';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { MatMenuModule } from '@angular/material/menu';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { JsonDatabaseService } from '../../../../json-database.service';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-${table}',
  standalone: true,
  imports: [
    CommonModule,
    MatTableModule,
    MatButtonModule,
    MatIconModule,
    MatFormFieldModule,
    MatInputModule,
    MatDialogModule,
    MatMenuModule,
    ReactiveFormsModule,
    FormsModule
  ],
  templateUrl: './${table}.component.html',
  styleUrls: ['./${table}.component.scss']
})
export class ${capitalize(table)}Component {
  displayedColumns: string[] = [];
  dataSource: any[] = [];
  filteredDataSource: any[] = [];
  ${table}Form: FormGroup;
  isEdit: boolean = false;
  searchText: string = '';
  showSuggestions: boolean = false;
  suggestions: any[] = [];
  searchTags: { category: string, value: string | number }[] = [];
  currentView: string = 'list';

  constructor(private fb: FormBuilder, private dialog: MatDialog, private jsonDatabaseService: JsonDatabaseService) {
    this.${table}Form = this.fb.group({});
    this.jsonDatabaseService.getDatabase().subscribe(db => {
      this.dataSource = db.${table};
      this.filteredDataSource = [...this.dataSource];
      this.setupForm();
      this.setupDisplayedColumns();
    });
  }

  setupForm(): void {
    const formFields = Object.keys(this.dataSource[0] || {});
    formFields.forEach(field => {
      this.${table}Form.addControl(field, this.fb.control('', Validators.required));
    });
  }

  setupDisplayedColumns(): void {
    this.displayedColumns = Object.keys(this.dataSource[0] || []);
    if (!this.displayedColumns.includes('actions')) {
      this.displayedColumns.push('actions');
    }
  }

  applyFilter(filterValue: string | Event): void {
    if (typeof filterValue === 'string') {
      this.searchText = filterValue;
    } else {
      this.searchText = (filterValue.target as HTMLInputElement).value;
    }
    this.showSuggestions = !!this.searchText;
    this.suggestions = this.getSuggestions(this.searchText);
    this.filterData();
  }

  filterData(): void {
    if (this.searchTags.length === 0) {
      this.filteredDataSource = this.dataSource.filter(item =>
        Object.values(item).some(value => 
          value != null && value.toString().toLowerCase().includes(this.searchText.toLowerCase())
        )
      );
    } else {
      this.filteredDataSource = this.dataSource.filter(item =>
        this.searchTags.every(tag => {
          const itemValue = item[tag.category];
          const tagValue = tag.value;
          if (typeof itemValue === 'number' || !isNaN(Number(tagValue))) {
            return itemValue === Number(tagValue);
          }
          return itemValue != null && itemValue.toString().toLowerCase().includes(tagValue.toString().toLowerCase());
        })
      );
    }
  }

  getSuggestions(query: string): any[] {
    const categories = Object.keys(this.dataSource[0] || {});
    const suggestions = categories.map(category => {
      const results = this.filteredDataSource
        .map(item => item[category])
        .filter(value => value != null && value.toString().toLowerCase().includes(query.toLowerCase()));

      if (results.length === 0) {
        return {
          category,
        results: [\`Rechercher \${category} pour: \${query}\`]
        };
      } else if (results.length === 1) {
        return {
          category,
          results
        };
      } else {
        return {
          category,
          results,
          expanded: false
        };
      }
    }).filter(suggestion => suggestion.results.length > 0);

    return suggestions;
  }

  toggleSuggestion(category: string): void {
    this.suggestions = this.suggestions.map(suggestion => {
      if (suggestion.category === category) {
        suggestion.expanded = !suggestion.expanded;
      }
      return suggestion;
    });
  }

  selectSuggestion(suggestion: { category: string, value: string | number }): void {
    if (!isNaN(Number(suggestion.value))) {
      suggestion.value = Number(suggestion.value);
    }
    this.searchTags.push(suggestion);
    this.searchText = '';
    this.applyFilter('');
    this.showSuggestions = false;
  }

  removeTag(index: number): void {
    this.searchTags.splice(index, 1);
    this.filterData();
  }

  setView(view: string): void {
    this.currentView = view;
  }

  addItem(item: any): void {
    this.dataSource.push(item);
    this.filteredDataSource.push(item);
  }
  editItem(item: any): void {
    this.isEdit = true;
    this.${table}Form.patchValue(item);
  }

   updateItem(item: any): void {
    const index = this.dataSource.findIndex(i => i.id === item.id);
    if (index !== -1) {
      this.dataSource[index] = item;
      this.filteredDataSource = [...this.dataSource];
    }
  }

  deleteItem(id: number): void {
    this.dataSource = this.dataSource.filter(item => item.id !== id);
    this.filteredDataSource = [...this.dataSource];
  }
}


`;

  const htmlContent = `
  <div class="container">
  <div class="table-container" [ngClass]="currentView + '-view'">
    <div class="search-container">
      <div class="search-input-wrapper">
        <div class="tag-container">
          <span *ngFor="let tag of searchTags; let i = index" class="search-tag">
            {{ tag.value }}
            <button mat-icon-button class="remove-tag-button" (click)="removeTag(i)">
              <mat-icon>close</mat-icon>
            </button>
          </span>
          <input (input)="applyFilter($event)" placeholder="Search tickets..." class="search-input" [(ngModel)]="searchText">
        </div>
        <mat-icon class="search-icon">search</mat-icon>
      </div>

      <div class="search-results" *ngIf="showSuggestions">
        <div *ngFor="let suggestion of suggestions">
          <div class="suggestion-category" (click)="toggleSuggestion(suggestion.category)">
            <mat-icon *ngIf="suggestion.results.length > 1">
              {{ suggestion.expanded ? 'expand_less' : 'expand_more' }}
            </mat-icon>
            <span>Rechercher {{ suggestion.category }} pour: {{ searchText }}</span>
          </div>
          <div *ngIf="suggestion.expanded || suggestion.results.length === 1" class="suggestion-items">
            <div *ngFor="let item of suggestion.results" class="suggestion-item" (click)="selectSuggestion({ category: suggestion.category, value: item })">
              {{ item }}
            </div>
          </div>
        </div>
      </div>

      <button mat-raised-button class="filter-button" (click)="applyFilter(searchText)">
        <mat-icon>filter_alt</mat-icon><span class="filter-text">Filter</span>
      </button>

      <div class="view-toggle-buttons">
        <button mat-icon-button (click)="setView('list')">
          <mat-icon>list</mat-icon>
        </button>
        <button mat-icon-button (click)="setView('grid')">
          <mat-icon>grid_on</mat-icon>
        </button>
      </div>
    </div>

    <ng-container *ngIf="currentView === 'list'">
      <table mat-table [dataSource]="filteredDataSource" class="mat-elevation-z8">
        <ng-container *ngFor="let column of displayedColumns">
          <ng-container [matColumnDef]="column">
            <th mat-header-cell *matHeaderCellDef> {{ column }} </th>
            <td mat-cell *matCellDef="let element" (click)="applyFilter(element[column])" [ngClass]="{'priority-cell': column === 'Priority', 'project-cell': column === 'Project'}">
              <ng-container *ngIf="column !== 'actions'; else actionsTemplate">
                {{ element[column] }}
              </ng-container>
              <ng-template #actionsTemplate>
                <button mat-icon-button [matMenuTriggerFor]="menu">
                  <mat-icon>more_vert</mat-icon>
                </button>
                <mat-menu #menu="matMenu">
                  <button mat-menu-item (click)="addItem(element)">
                    <mat-icon>add</mat-icon>
                    <span>ADD</span>
                  </button>
                  <button mat-menu-item (click)="editItem(element)">
                    <mat-icon>edit</mat-icon>
                    <span>Edit</span>
                  </button>
                  <button mat-menu-item (click)="deleteItem(element.id)">
                    <mat-icon>delete</mat-icon>
                    <span>Delete</span>
                  </button>
                </mat-menu>
              </ng-template>
            </td>
          </ng-container>
        </ng-container>
        
        <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
        <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
      </table>
    </ng-container>

    <ng-container *ngIf="currentView === 'grid'">
      <div class="grid-container">
        <div *ngFor="let row of filteredDataSource" class="grid-card">
          <div *ngFor="let column of displayedColumns" class="grid-item" [ngClass]="{'priority-cell': column === 'Priority', 'project-cell': column === 'Project'}">
            <ng-container *ngIf="column !== 'actions'; else actionsTemplateGrid">
              <strong>{{ column }}:</strong> {{ row[column] }}
            </ng-container>
            <ng-template #actionsTemplateGrid>
              <div class="action-buttons">
                <button mat-icon-button (click)="editItem(row)">
                  <mat-icon>edit</mat-icon>
                </button>
                <button mat-icon-button (click)="deleteItem(row.id)">
                  <mat-icon>delete</mat-icon>
                </button>
              </div>
            </ng-template>
          </div>
        </div>
      </div>
    </ng-container>
  </div>
</div>




`;
const scssContent = `

.container {
  width: 100%;
  margin: 20px;
}

.form-container {
  width: 100%;
  margin-bottom: 20px;
}

.form-fields {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}

.table-container {
  width: 100%;
  margin-top: 20px;

  &.list-view {
    table {
      width: 100%;
    }

    mat-header-row, mat-row {
      display: table-row;
    }
  }

  &.grid-view {
    display: flex;
    flex-wrap: wrap;

    .grid-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      justify-content: flex-start; /* Adjust to center or start */
      align-items: stretch; /* Ensure all cards in a row are the same height */
  


    

      .grid-card {
        display: flex;
        flex-direction: column;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        padding: 20px;
        background-color: white;
        width: calc(33.33% - 40px); /* Adjusted card width for roughly 4 cards per row */
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        flex: 1; /* Ensure cards fill the available space */
        box-sizing: border-box; /* Include padding and border in the element's total width and height */

    

        
        .grid-item {
          margin-bottom: 10px;

          &:last-child {
            margin-bottom: 0;
          }

          .priority-cell {
            font-weight: bold;
            color: red;
          }
          
          .project-cell {
            font-style: italic;
            color: blue;
          }
        }
      }
    }
  }
}

.search-container {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
  position: relative;
  width: 100%;
}

.search-input-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  border: 1px solid #ccc;
  border-radius: 25px; /* Adjusted border-radius */
  padding: 5px 10px;
  background-color: #fff;

  .search-tags {
    display: flex;
    flex-wrap: wrap;
    padding: 5px;
    margin-right: 10px; /* Added margin-right to separate from input */
    
    .tag-container {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      gap: 5px;
    }
    
    .search-tag {
      background-color: #e0e0e0;
      border-radius: 12px;
      padding: 5px 10px;
      display: flex;
      align-items: center;
    }
    
    .remove-tag-button {
      margin-left: 5px;
      color: #666;
      cursor: pointer;
    }
    
  }
}

.search-input {
  padding: 10px;
  border: none;
  border-radius: 25px; /* Adjusted border-radius */
  outline: none;
  width: 300px;
}

.search-icon {
  position: absolute;
  right: 10px;
  color: #ccc;
}

.search-results {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background-color: white;
  border: 1px solid #ccc;
  border-radius: 5px;
  max-height: 200px;
  overflow-y: auto;
  z-index: 1000;
}

.suggestion-category {
  font-weight: bold;
  padding: 5px 10px;
  background-color: #f1f1f1;
  border-bottom: 1px solid #ccc;
  display: flex;
  align-items: center;
  cursor: pointer;
}

.suggestion-items {
  padding: 5px 10px;

  .suggestion-item {
    padding: 5px 0;
    cursor: pointer;

    &:hover {
      background-color: #f1f1f1;
    }
  }
}

.filter-button {
  margin-left: 20px;
}

.view-toggle-buttons {
  margin-left: auto;
  display: flex;
  align-items: center;
}




`;
  const tsFilePath = path.join(targetPath, table, `${table}.component.ts`);
  fs.writeFileSync(tsFilePath, tsContent, 'utf8');
  const htmlFilePath = path.join(targetPath, table, `${table}.component.html`);
  fs.writeFileSync(htmlFilePath, htmlContent, 'utf8');
  const scssFilePath = path.join(targetPath, table, `${table}.component.scss`);
  fs.writeFileSync(scssFilePath, scssContent, 'utf8');
};

const icons = [
  'heroicons_outline:sparkles',
  'heroicons_outline:magnifying-glass',
  'heroicons_outline:home'
];


function getRandomIcon() {
  const randomIndex = Math.floor(Math.random() * icons.length);
  return icons[randomIndex];
}

const addToNavigation = (table) => {
  const navContent = fs.readFileSync(navigationFile, 'utf8');
  if (navContent.includes(`'dashboards.${table}'`)) {
    console.log(`Navigation for ${table} already exists.`);
    return;
  }

  const navItem = `
      {
        id   : 'dashboards.${table}',
        title: '${capitalize(table)}',
        type : 'basic',
        icon : '${getRandomIcon()}',
        link : '/ui/${table}',
      },`;

  const updatedNavContent = navContent.replace(/(children: \[)([\s\S]*)(\])/, `$1$2${navItem}\n$3`);
  fs.writeFileSync(navigationFile, updatedNavContent, 'utf8');
  console.log(`Navigation for ${table} added.`);
};

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

const generateComponentRoutes = (table) => {
  const route = `{ path: '${table}', loadChildren: () => import('app/modules/admin/pages/${table}/${table}.routes') },`;
  return route;
};

const createJsonDatabaseServiceFile = () => {
  const serviceContent = `
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class JsonDatabaseService {
  private databaseUrl = 'assets/random.json'; // Assuming your JSON file is located in the assets folder

  constructor(private http: HttpClient) { }

  getDatabase(): Observable<any> {
    return this.http.get<any>(this.databaseUrl);
  }
}
`;

  const serviceFilePath = path.join('src/app', serviceFileName);
  fs.writeFileSync(serviceFilePath, serviceContent, 'utf8');
};

const generateRoutesFile = (table) => {
  const routesContent = `
import { Routes } from '@angular/router';
import { ${capitalize(table)}Component } from './${table}.component';

export default [
  {
    path: '',
    component: ${capitalize(table)}Component,
  },
] as Routes;
`;

  const routesFilePath = path.join(targetPath, table, `${table}.routes.ts`);
  fs.writeFileSync(routesFilePath, routesContent, 'utf8');
};
const addComponentRoutesToAppRoutes = () => {
  let appRoutesContent = fs.readFileSync(appRoutesFile, 'utf8');
  let newRoutes = '';
  for (const table of Object.keys(database)) {
    const componentRoute = generateComponentRoutes(table);
    newRoutes += componentRoute;
  }
  appRoutesContent = appRoutesContent.replace(
    /(\{[\s\S]*children:[\s\S]*?\[)([\s\S]*)(\])/,
    `$1${newRoutes}\n$2$3`
  );
  fs.writeFileSync(appRoutesFile, appRoutesContent, 'utf8');
};

const main = async () => {
  try {
  
    createJsonDatabaseServiceFile();
    for (const table of Object.keys(database)) {
  
      await generateComponent(table);
    }
    addComponentRoutesToAppRoutes();
    console.log('comp and routes added succ.');
  } catch (error) {
    console.error('Error:', error);
  }
};

main();
